#!/usr/bin/env bash
# This script was generated by bashly 1.1.1 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
ges_tool_usage() {
  if [[ -n $long_usage ]]; then
    printf "ges-tool - CLI for GCP GenAI App Builder Enterprise Search.\n"
    echo

  else
    printf "ges-tool - CLI for GCP GenAI App Builder Enterprise Search.\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  ges-tool COMMAND\n"
  printf "  ges-tool [COMMAND] --help | -h\n"
  printf "  ges-tool --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Checks for gcloud authentication and installs dependent tools\n" "init        "
  printf "  %s   Perform a single unstructured search query\n" "usearch     "
  printf "  %s   Perform a batch search using external file that outputs to csv\n" "batch-search"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "GCP_PROJECT_NUMBER (required)"
    printf "    Set your GCP Enterprise Search Project Number (not project id)\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "DATASTORE_NAME (required)"
    printf "    Data Store name of the format <data_store>_<some_number>\"\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "GCP_ACCESS_TOKEN (required)"
    printf "    GCP access-token. i.e. output of  \`gcloud auth print-access-token\` or obtain\n    access token using service account.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  Single search with csv output. Only shows the summary and first document link\n  $ ./ges-tool s \"What is the interest rate?\" -c\n  \n  Single search with table output. Only shows the summary and first document\n  link\n  $ ./ges-tool s \"What is the interest rate?\" -m\n  \n   Single search with raw json output\n  $ ./ges-tool s \"What is the interest rate?\" \n  \n  Batch search with input file containing search queries and output a csv file\n  with results. Only shows the summary and first document link\n  $ ./ges-tool b search_terms.txt results_file.csv\n"
    echo

  fi
}

# :command.usage
ges_tool_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "ges-tool init - Checks for gcloud authentication and installs dependent tools\n"
    echo

  else
    printf "ges-tool init - Checks for gcloud authentication and installs dependent tools\n"
    echo

  fi

  printf "Alias: i\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ges-tool init\n"
  printf "  ges-tool init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
ges_tool_usearch_usage() {
  if [[ -n $long_usage ]]; then
    printf "ges-tool usearch - Perform a single unstructured search query\n"
    echo

  else
    printf "ges-tool usearch - Perform a single unstructured search query\n"
    echo

  fi

  printf "Alias: s\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ges-tool usearch QUERY [PAGE_SIZE] [OPTIONS]\n"
  printf "  ges-tool usearch --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--minimal, -m"
    printf "    only show the minumum fields\n"
    echo

    # :flag.usage
    printf "  %s\n" "--csv, -c"
    printf "    output to csv\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "QUERY"
    printf "    search query string\n"
    echo

    # :argument.usage
    printf "  %s\n" "PAGE_SIZE"
    printf "    Number of results to per page. default is 5\n"
    printf "    Default: 3\n"
    echo

  fi
}

# :command.usage
ges_tool_batch_search_usage() {
  if [[ -n $long_usage ]]; then
    printf "ges-tool batch-search - Perform a batch search using external file that outputs to csv\n"
    echo

  else
    printf "ges-tool batch-search - Perform a batch search using external file that outputs to csv\n"
    echo

  fi

  printf "Alias: b\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ges-tool batch-search INPUT_FILE OUTPUT_FILE [PAGE_SIZE] [OPTIONS]\n"
  printf "  ges-tool batch-search --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--format, -c"
    printf "    output to csv\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "INPUT_FILE"
    printf "    file name containing queries\n"
    echo

    # :argument.usage
    printf "  %s\n" "OUTPUT_FILE"
    printf "    file name containing output\n"
    echo

    # :argument.usage
    printf "  %s\n" "PAGE_SIZE"
    printf "    Number of results to per page. default is 5\n"
    printf "    Default: 5\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions
# :command.function
ges_tool_init_command() {
  # src/init_command.sh
  if [ -f "jtbl" ]; then
    echo "The jbtl tool is already installed."
  else
    # Determine the platform.
    platform=$(uname -s)-$(uname -m)
    # to upper case
    platform_lower=${platform,,}

     # Destination file to save the downloaded content
    file_path=jtbl-1.5.2-"${platform_lower}".tar.gz

    url=https://github.com/kellyjonbrazil/jtbl/releases/download/v1.5.2/jtbl-1.5.2-"${platform_lower}".tar.gz

    # Use curl to download the file
    response_code=$(curl -LO "$url" -w "%{http_code}")

    # Check the HTTP status code
    if [ "$response_code" -eq 200 ]; then
      echo "File $file_path downloaded successfully (HTTP status code: $response_code)."
      echo "The jbtl tool installed."
      # You can further process the downloaded file or display a success message.
    else
      echo "File download failed (HTTP status code: $response_code)."
      echo "The jbtl tool NOT installed. Check you have an internet connection."
      exit 1
      # Handle the error or display an error message.
    fi
    tar -xzf "$file_path"

    rm "$file_path"
  fi
  echo "Checking for gcloud authetication"
  token=$(gcloud auth print-access-token)
  echo "gcloud auth succeeded."

}

# :command.function
ges_tool_usearch_command() {
  # src/usearch_command.sh
  querystring=${args[query]}
  page_size=${args[page_size]}
  minimal=${args[--minimal]}
  csv=${args[--csv]}
  file=${args[--file]}

  token=${GCP_ACCESS_TOKEN}
  flag=''

  if [[ $minimal ]]; then
      output=$(curl -s  -X POST -H "Authorization: Bearer $token" -H "Content-Type: application/json" "https://discoveryengine.googleapis.com/v1alpha/projects/${GCP_PROJECT_NUMBER}/locations/global/collections/default_collection/dataStores/${DATASTORE_NAME}/servingConfigs/default_search:search" -d '{ "query": "'"${querystring}"'", "page_size": "5", "offset": 0 , "contentSearchSpec": { "snippetSpec":{"maxSnippetCount": 3}, "summarySpec":{"summaryResultCount": 5} } }')
      use_jtbl=1
  elif  [[ $csv ]]; then
      output=$(curl -s -X POST -H "Authorization: Bearer $token" -H "Content-Type: application/json" "https://discoveryengine.googleapis.com/v1alpha/projects/${GCP_PROJECT_NUMBER}/locations/global/collections/default_collection/dataStores/${DATASTORE_NAME}/servingConfigs/default_search:search" -d '{ "query": "'"${querystring}"'", "page_size": "5", "offset": 0 , "contentSearchSpec": { "snippetSpec":{"maxSnippetCount": 3}, "summarySpec":{"summaryResultCount": 5}} }')
      flag='-c'
      use_jtbl=1
  else
      output=$(curl -s -X POST -H "Authorization: Bearer $token" -H "Content-Type: application/json" "https://discoveryengine.googleapis.com/v1alpha/projects/${GCP_PROJECT_NUMBER}/locations/global/collections/default_collection/dataStores/${DATASTORE_NAME}/servingConfigs/default_search:search" -d '{ "query": "'"${querystring}"'", "page_size": "5", "offset": 0 , "contentSearchSpec": { "snippetSpec":{"maxSnippetCount": 3}, "summarySpec":{"summaryResultCount": 5} } }')
  fi

  if [[ $output ]]; then
      error=$(echo "$output" | jq '.error.code' )
      if [ "$error" = '401' ]; then
          echo "Authentication failed with credentials in GCP_ACCESS_TOKEN"
          exit 1
      else
          if [[ $use_jtbl ]]; then

              echo "$output" | jq  '[{summary: .summary.summaryText, link: .results[0].document.derivedStructData.link}]' | ./jtbl $flag
          else
              echo "$output"

          fi
      fi
  fi

}

# :command.function
ges_tool_batch_search_command() {
  # src/batch_search_command.sh
  page_size=${args[page_size]}
  input_file=${args[input_file]}
  output_file=${args[output_file]}

  token=${GCP_ACCESS_TOKEN}

  output="["
  echo "doing batch from ${input_file}"
  while IFS= read -r line
   do
      if [ -z "$line" ]; then
          continue;
      else
          command_output=$(curl -s -X POST -H "Authorization: Bearer $token" -H "Content-Type: application/json" "https://discoveryengine.googleapis.com/v1alpha/projects/${GCP_PROJECT_NUMBER}/locations/global/collections/default_collection/dataStores/${DATASTORE_NAME}/servingConfigs/default_search:search" -d '{ "query": "'"${line}"'", "page_size": "5", "offset": 0 , "contentSearchSpec": { "snippetSpec":{"maxSnippetCount": 3}, "summarySpec":{"summaryResultCount": 5}} }')

          error=$(echo "$command_output" | jq '.error.code' )
          if [ "$error" = '401' ]; then
              echo "Authentication failed with credentials in GCP_ACCESS_TOKEN"
              exit 1
          else
             output+=$(echo "$command_output" | jq  '{summary: .summary.summaryText, link: .results[0].document.derivedStructData.link}')
          fi
          output+=","
      fi
  done < "$input_file"
  output=${output::-1}
  output+="]"
  echo "$output" | ./jtbl -c > "${output_file}"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        ges_tool_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter

  if [[ -z "${GCP_PROJECT_NUMBER:-}" ]]; then
    printf "missing required environment variable: GCP_PROJECT_NUMBER\n" >&2
    exit 1
  fi
  if [[ -z "${DATASTORE_NAME:-}" ]]; then
    printf "missing required environment variable: DATASTORE_NAME\n" >&2
    exit 1
  fi
  if [[ -z "${GCP_ACCESS_TOKEN:-}" ]]; then
    printf "missing required environment variable: GCP_ACCESS_TOKEN\n" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    init | i)
      action="init"
      shift
      ges_tool_init_parse_requirements "$@"
      shift $#
      ;;

    usearch | s)
      action="usearch"
      shift
      ges_tool_usearch_parse_requirements "$@"
      shift $#
      ;;

    batch-search | b)
      action="batch-search"
      shift
      ges_tool_batch_search_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      ges_tool_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ges_tool_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ges_tool_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ges_tool_usearch_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ges_tool_usearch_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="usearch"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --minimal | -m)

        # :flag.case_no_arg
        args['--minimal']=1
        shift
        ;;

      # :flag.case
      --csv | -c)

        # :flag.case_no_arg
        args['--csv']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['query']+x} ]]; then

          args['query']=$1
          shift
        elif [[ -z ${args['page_size']+x} ]]; then

          args['page_size']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['query']+x} ]]; then
    printf "missing required argument: QUERY\nusage: ges-tool usearch QUERY [PAGE_SIZE] [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['page_size']:-} ]] || args['page_size']="3"

}

# :command.parse_requirements
ges_tool_batch_search_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ges_tool_batch_search_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="batch-search"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --format | -c)

        # :flag.case_no_arg
        args['--format']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['input_file']+x} ]]; then

          args['input_file']=$1
          shift
        elif [[ -z ${args['output_file']+x} ]]; then

          args['output_file']=$1
          shift
        elif [[ -z ${args['page_size']+x} ]]; then

          args['page_size']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['input_file']+x} ]]; then
    printf "missing required argument: INPUT_FILE\nusage: ges-tool batch-search INPUT_FILE OUTPUT_FILE [PAGE_SIZE] [OPTIONS]\n" >&2
    exit 1
  fi
  if [[ -z ${args['output_file']+x} ]]; then
    printf "missing required argument: OUTPUT_FILE\nusage: ges-tool batch-search INPUT_FILE OUTPUT_FILE [PAGE_SIZE] [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['page_size']:-} ]] || args['page_size']="5"

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "init") ges_tool_init_command ;;
    "usearch") ges_tool_usearch_command ;;
    "batch-search") ges_tool_batch_search_command ;;
  esac
}

initialize
run "$@"
