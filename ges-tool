#!/usr/bin/env bash
# This script was generated by bashly 1.0.6 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
ges_tool_usage() {
  if [[ -n $long_usage ]]; then
    printf "ges-tool - GCP Enterprise Search Tool for Unstrcu\n"
    echo

  else
    printf "ges-tool - GCP Enterprise Search Tool for Unstrcu\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  ges-tool COMMAND\n"
  printf "  ges-tool [COMMAND] --help | -h\n"
  printf "  ges-tool --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Perform a single unstructured search query\n" "usearch"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "GCP_PROJECT_NUMBER (required)"
    printf "    Set your GCP Enterprise Search Project Number (not project id)\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "DATASTORE_NAME (required)"
    printf "    Data Store name of the format <data_store>_<some_number>\"\n"
    echo

  fi
}

# :command.usage
ges_tool_usearch_usage() {
  if [[ -n $long_usage ]]; then
    printf "ges-tool usearch - Perform a single unstructured search query\n"
    echo

  else
    printf "ges-tool usearch - Perform a single unstructured search query\n"
    echo

  fi

  printf "Alias: s\n"
  echo

  printf "%s\n" "Usage:"
  printf "  ges-tool usearch QUERY [PAGE_SIZE] [OPTIONS]\n"
  printf "  ges-tool usearch --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--force, -f"
    printf "    Overwrite existing files\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "QUERY"
    printf "    search query string\n"
    echo

    # :argument.usage
    printf "  %s\n" "PAGE_SIZE"
    printf "    Number of results to per page. default is 5\n"
    printf "    Default: 5\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  ges-tool usearch \"how do i make a payment\"\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions
# :command.function
ges_tool_usearch_command() {
  # src/usearch_command.sh
  querystring=${args[query]}
  page_size=${args[page_size]}
  #echo ${query}
  curl -X POST -H "Authorization: Bearer $(gcloud auth print-access-token)" -H "Content-Type: application/json" "https://discoveryengine.googleapis.com/v1alpha/projects/${GCP_PROJECT_NUMBER}/locations/global/collections/default_collection/dataStores/${DATASTORE_NAME}/servingConfigs/default_search:search" -d '{ "query": "'"${querystring}"'", "page_size": "5", "offset": 0 , "contentSearchSpec": { "snippetSpec":{"maxSnippetCount": 2,"referenceOnly": false}, "extractiveContentSpec": {"maxExtractiveSegmentCount": 1} } }' \
  | jq -r '[.results[0].document.derivedStructData.link, .results[0].document.derivedStructData.snippets[0].snippet | @csv'
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        ges_tool_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter

  if [[ -z "${GCP_PROJECT_NUMBER:-}" ]]; then
    printf "missing required environment variable: GCP_PROJECT_NUMBER\n" >&2
    exit 1
  fi
  if [[ -z "${DATASTORE_NAME:-}" ]]; then
    printf "missing required environment variable: DATASTORE_NAME\n" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    usearch | s)
      action="usearch"
      shift
      ges_tool_usearch_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      ges_tool_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
ges_tool_usearch_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        ges_tool_usearch_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="usearch"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --force | -f)

        # :flag.case_no_arg
        args['--force']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['query']+x} ]]; then

          args['query']=$1
          shift
        elif [[ -z ${args['page_size']+x} ]]; then

          args['page_size']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['query']+x} ]]; then
    printf "missing required argument: QUERY\nusage: ges-tool usearch QUERY [PAGE_SIZE] [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['page_size']:-} ]] || args['page_size']="5"

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "usearch") ges_tool_usearch_command ;;
  esac
}

initialize
run "$@"
