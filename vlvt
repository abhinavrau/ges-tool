#!/usr/bin/env bash
# This script was generated by bashly 1.1.4 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
vlvt_usage() {
  if [[ -n $long_usage ]]; then
    printf "vlvt - Velvet - Vertex AI Search verfication tool\n"
    echo

  else
    printf "vlvt - Velvet - Vertex AI Search verfication tool\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  vlvt COMMAND\n"
  printf "  vlvt [COMMAND] --help | -h\n"
  printf "  vlvt --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Checks for gcloud authentication and installs dependent tools\n" "$(green "init")   "
  printf "  %s   Perform a single search query and outputs results as csv\n" "$(green "search") "
  printf "  %s   Perform a batch search using queries from an external file\n" "$(green "bsearch")"
  printf "  %s   Perform a batch search and verify using an input csv file that outputs to JSON lines.\n" "$(green "verify") "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "$(magenta "--version, -v")"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "$(bold "Environment Variables:")"

    # :environment_variable.usage
    printf "  %s\n" "$(cyan "VAI_SEARCH_PROJECT_NUMBER (required)")"
    printf "    Set your GCP Vertex AI Search Project Number (NOT project ID)\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "$(cyan "VAI_SEARCH_DATASTORE_NAME (required)")"
    printf "    Vertex AI Search Data Store name of the format <data_store>_<some_number>\"\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "$(cyan "GCP_ACCESS_TOKEN")"
    printf "    Optional - GCP access-token. To be used if access-token is obtained using\n    third party tool like Vault. If this is not set then  \`gcloud auth\n    print-access-token\` is used to obtain access token.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  Using the Alphabet financial reports and 10Ks datastore from\n  https://cloud.google.com/generative-ai-app-builder/docs/try-enterprise-search#create_and_preview_a_search_app_for_unstructured_data_from\n  \n  Single search with table output. \n  $ ./vlvt search \"You are expert financial analyst. Be terse. Answer the\n  question with minimal facts. What is Google's revenue for year ending 2022?\"\n  --format=table\n  \n  Single search with csv output.\n  $ ./vlvt search \"You are expert financial analyst. Be terse. Answer the\n  question with minimal facts. What is Google's revenue for year ending 2022?\"\n  --format=csv\n  \n  Single search with jsonl output\n  $ ./vlvt search \"You are expert financial analyst. Be terse. Answer the\n  question with minimal facts. What is Google's revenue for year ending 2022?\"\n  -f=jsonl\n  \n  Batch search with input file containing search queries and output a csv file\n  with results.\n  $ ./vlvt bsearch test/datatest/data/batch_test_success.txt --f=csv >\n  batch_results.csv\n  \n  Batch search AND verify with input file containing search queries with\n  expected resutls and output results to a csv file.\n  $ ./vlvt verify test/data/verification_test_success.csv --f=csv >\n  verify_results.csv\n"
    echo

  fi
}

# :command.usage
vlvt_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "vlvt init - Checks for gcloud authentication and installs dependent tools\n"
    echo

  else
    printf "vlvt init - Checks for gcloud authentication and installs dependent tools\n"
    echo

  fi

  printf "Alias: i\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  vlvt init\n"
  printf "  vlvt init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
vlvt_search_usage() {
  if [[ -n $long_usage ]]; then
    printf "vlvt search - Perform a single search query and outputs results as csv\n"
    echo

  else
    printf "vlvt search - Perform a single search query and outputs results as csv\n"
    echo

  fi

  printf "Alias: s\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  vlvt search QUERY [OPTIONS]\n"
  printf "  vlvt search --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--format, -f FORMAT")"
    printf "    format of output. CSV is default if no option is specified\n"
    printf "    Allowed: csv, table, jsonl, raw\n"
    printf "    Default: csv\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "QUERY")"
    printf "    search query string\n"
    echo

  fi
}

# :command.usage
vlvt_bsearch_usage() {
  if [[ -n $long_usage ]]; then
    printf "vlvt bsearch - Perform a batch search using queries from an external file\n"
    echo

  else
    printf "vlvt bsearch - Perform a batch search using queries from an external file\n"
    echo

  fi

  printf "Alias: b\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  vlvt bsearch INPUT_FILE [OPTIONS]\n"
  printf "  vlvt bsearch --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--format, -f FORMAT")"
    printf "    format of output. CSV is default if no option is specified\n"
    printf "    Allowed: csv, table, jsonl\n"
    printf "    Default: csv\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "INPUT_FILE")"
    printf "    Text file name containing queries. One per line.\n"
    echo

  fi
}

# :command.usage
vlvt_verify_usage() {
  if [[ -n $long_usage ]]; then
    printf "vlvt verify - Perform a batch search and verify using an input csv file that outputs to JSON lines.\n"
    echo

  else
    printf "vlvt verify - Perform a batch search and verify using an input csv file that outputs to JSON lines.\n"
    echo

  fi

  printf "Alias: v\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  vlvt verify INPUT_FILE [OPTIONS]\n"
  printf "  vlvt verify --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--format, -f FORMAT")"
    printf "    format of output. CSV is default if no option is specified\n"
    printf "    Allowed: csv, table, jsonl\n"
    printf "    Default: csv\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--mrr-threshold, -t MRR-THRESHOLD")"
    printf "    Mean Reciprocal Rank (MRR) threshold to be above. If specified it will fail\n    if MRR is below this threshold.\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--summary-threshold, -s SUMMARY-THRESHOLD")"
    printf "    Average Summary Precision threshold to be above. If specified it will fail\n    if Average Summary Precision is below this threshold.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(blue "INPUT_FILE")"
    printf "    csv file containing queries and expected results format is - id, query,\n    expected_summary, expected_document_link_1, expected_document_link_2\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "$(bold "Environment Variables:")"

    # :environment_variable.usage
    printf "  %s\n" "$(cyan "TEXT_BISON_PROJECT_ID (required)")"
    printf "    GCP Project where Palm text-bison API is enabled and available\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "$(cyan "TEXT_BISON_LOCATION_ID (required)")"
    printf "    GCP Region to use for the text-bison API is enabled and available\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/calc_mrr_at_2.sh
# shellcheck disable=SC2148
function rank_reciprocal_at_2() {
  local actual_link_1="$1"
  local actual_link_2="$2"
  local expected_link_1="$3"
  local expected_link_2="$4"

  local rank=0

  # For each document link in the expected results, check if it is also in the actual results.
  if [ "$actual_link_1" == "${expected_link_1}" ]; then
        rank=$(echo "scale=4; 1" | bc)
  elif [ "$actual_link_2" == "${expected_link_1}" ]; then
        rank=$(echo "scale=4; 1/2" | bc)
  elif [ "$actual_link_1" == "${expected_link_2}" ]; then
        rank=$(echo "scale=4; 1/2" | bc)
  elif [ "$actual_link_2" == "${expected_link_2}" ]; then
        rank=$(echo "scale=4; 1/2" | bc)
  fi

  # Return the rank_reciprocal_at_2 value.
  echo "$rank"
}

# src/lib/calc_ndcg.sh
# shellcheck disable=SC2148
function calc_ndcg() {

    local link_1
    local link_2
    local expected_link_1
    local expected_link_2
    local relevance_scores
    local ideal_relevance_scores
    local dcg
    local idcg
    local ndcg

    link_1="$1"
    link_2="$2"
    expected_link_1="$3"
    expected_link_2="$4"

    # Define relevance and ideal relevance scores
    relevance_scores=()
    if [[ "$link_1" == "$expected_link_1" ]]; then
        relevance_scores+=(2)
    elif [[ "$link_1" == "$expected_link_2" ]]; then
        relevance_scores+=(1)
    else
        relevance_scores+=(0)
    fi

    if [[ "$link_2" == "$expected_link_1" ]]; then
        relevance_scores+=(1)
    elif [[ "$link_2" == "$expected_link_2" ]]; then
        relevance_scores+=(1)
    else
        relevance_scores+=(0)
    fi

    # Calculate and print NDCG for current row
    dcg=0
    for i in "${!relevance_scores[@]}"; do
        local relevance_score="${relevance_scores[$i]}"
        dcg=$(echo "scale=10; $dcg + $relevance_score / l($i + 2)" | bc -l)
    done
    #echo "dcg=$dcg"

    ideal_relevance_scores=()
    ideal_relevance_scores+=(2)
    ideal_relevance_scores+=(2)

    idcg=0
    for i in "${!ideal_relevance_scores[@]}"; do
        local ideal_relevance_score="${ideal_relevance_scores[$i]}"
        idcg=$(echo "scale=10; $idcg + $ideal_relevance_score / l($i + 2)" | bc -l)
    done
    #echo "idcg=$idcg"

    ndcg=0
    if (( $(echo "$idcg > 0" | bc -l) )); then
        ndcg=$(echo "scale=4; $dcg / $idcg" | bc -l)
    fi

    echo "$ndcg"
}

# src/lib/calc_precision_at_k.sh
# shellcheck disable=SC2148

function precision_at() {
  local actual_link="$1"
  local expected_link_1="$2"
  local expected_link_2="$3"
  local position="$4"
  local precision=0
  # For each document link in the expected results, check if it is also in the actual results.
  if [ "$actual_link" == "${expected_link_1}" ]; then
        precision=$(echo "scale=4; $position/1" | bc)
  elif [ "$actual_link" == "${expected_link_2}" ]; then
        precision=$(echo "scale=4; $position/2" | bc)
  fi
  # Return the p value.
  echo "$precision"
}

# src/lib/call_palm_text_bison.sh
# shellcheck disable=SC2148
call_palm_text_bison() {

    prompt="You will get two answers to a question, you should determine if they are semantically similar or not.

    examples - answer_1: I was created by X. answer_2: X created me. output:same

    answer_1:There are 52 days in a year. answer_2: A year is fairly long. output:different"
    full_payload=$prompt". Now answer answer_1: $summary,
        answer_2: $expected_summary
        output:"

    jsonPayload="

    {
            \"instances\": [
                {
                    \"content\": \"${full_payload}\"
                }
            ],
            \"parameters\": {
                \"candidateCount\": 1,
                \"maxOutputTokens\": 1024,
                \"temperature\": 0.2
            }
    }"
    #echo "$jsonPayload"

    API_ENDPOINT="${TEXT_BISON_LOCATION_ID}-aiplatform.googleapis.com"
    MODEL_ID="text-bison"

    match_result=$(curl \
    -s \
    -X POST \
    -H "Authorization: Bearer $token" \
    -H "Content-Type: application/json" \
    "https://${API_ENDPOINT}/v1/projects/${TEXT_BISON_PROJECT_ID}/locations/${TEXT_BISON_LOCATION_ID}/publishers/google/models/${MODEL_ID}:predict" -d "$jsonPayload")
    error=$(echo "$match_result" | jq '.error.code' )
    if [ -z "$error" ]; then
        error_message=$(echo "$match_result" | jq '.error.message' )
        echo "Calling Vertex AI search failed. ErrorCode:$error ErrorMessage:$error_message"
        exit 1
    fi

    summary_match=$(echo "$match_result" | jq '.predictions[0].content' | sed 's/"//g' | xargs)
}

# src/lib/call_vertex_ai_search.sh
# shellcheck disable=SC2148
call_vertex_ai_search() {

    command_output=$(curl -s -X POST -H "Authorization: Bearer $token" -H "Content-Type: application/json" "https://discoveryengine.googleapis.com/v1alpha/projects/${VAI_SEARCH_PROJECT_NUMBER}/locations/global/collections/default_collection/dataStores/${VAI_SEARCH_DATASTORE_NAME}/servingConfigs/default_search:search" -d '{ "query": "'"${query}"'", "page_size": "5", "offset": 0 , "contentSearchSpec": { "snippetSpec":{"maxSnippetCount": 2}, "summarySpec":{"summaryResultCount": 3}} }')

    error=$(echo "$command_output" | jq '.error.code' )
    if [ -z "$error" ]; then
        error_message=$(echo "$command_output" | jq '.error.message' )
        echo "Calling Vertex AI search failed. ErrorCode:$error ErrorMessage:$error_message"
        exit 1
    fi
    summary=$(echo "$command_output" | jq '.summary.summaryText' | sed 's/"//g')
    link_1=$(echo "$command_output" | jq '.results[0].document.derivedStructData.link' | sed 's/"//g' | xargs)
    link_2=$(echo "$command_output" | jq '.results[1].document.derivedStructData.link' | sed 's/"//g' | xargs)

    link_3=$(echo "$command_output" | jq '.results[2].document.derivedStructData.link' | sed 's/"//g' | xargs)

}

# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# src/lib/format-output.sh
# shellcheck disable=SC2148
format_output() {
    if [ "$format" = "table" ]; then
        echo "$output" | ./jtbl

    elif [ "$format" == "csv" ]; then
        echo "$output" | ./jtbl -c
    elif [ "$format" == "jsonl" ]; then
        echo "$output"

    elif [ "$format" == "raw" ]; then
        echo "$command_output"

    fi

}

# :command.command_functions
# :command.function
vlvt_init_command() {
  # src/init_command.sh
  if [ -f "jtbl" ]; then
    echo "The jbtl tool is already installed."
  else

    os=$(uname -s)
    arch=$(uname -m)

    # For macOS stick to x86 since no arm build yet.
    if [ "$arch" == "Darwin" ]; then
        arch="x86_64"
    fi

    # Determine the platform.
    platform="$os"-"$arch"
    # to lower case
    platform_lower=${platform,,}

     # Destination file to save the downloaded content
    file_path=jtbl-1.5.2-"${platform_lower}".tar.gz

    url=https://github.com/kellyjonbrazil/jtbl/releases/download/v1.5.2/jtbl-1.5.2-"${platform_lower}".tar.gz

    # Use curl to download the file
    response_code=$(curl -s -LO "$url" -w "%{http_code}")

    # Check the HTTP status code
    if [ "$response_code" -eq 200 ]; then
      echo "File $file_path downloaded successfully (HTTP status code: $response_code)."
      echo "The jbtl tool installed."
      # You can further process the downloaded file or display a success message.
    else
      echo "File download failed (HTTP status code: $response_code)."
      echo "The jbtl tool NOT installed. Check you have an internet connection."
      exit 1
      # Handle the error or display an error message.
    fi
    tar -xzf "$file_path"

    rm "$file_path"
  fi
  echo "Checking for gcloud authetication"
  token=$(gcloud auth print-access-token)
  echo "gcloud auth succeeded."

}

# :command.function
vlvt_search_command() {
  # src/search_command.sh
  querystring=${args[query]}
  format=${args[--format]}
  file=${args[--file]}

  token=${GCP_ACCESS_TOKEN}

  if [ -z "$token" ]; then

      token=$(gcloud auth print-access-token)
  fi

  command_output=""
  query=$querystring
  call_vertex_ai_search

  output+="{\"summary\": \"$summary\", \"link_1\": \"$link_1\", \"link_2\": \"$link_2\", \"link_3\": \"$link_3\"}"$'\n'
  format_output

}

# :command.function
vlvt_bsearch_command() {
  # src/bsearch_command.sh
  format=${args[--format]}
  input_file=${args[input_file]}
  token=${GCP_ACCESS_TOKEN}

  if [ -z "$token" ]; then

      token=$(gcloud auth print-access-token)
  fi

  output=""
  while IFS= read -r line
   do
      if [ -z "$line" ]; then
          continue;
      else

          query=$line
          call_vertex_ai_search

          output+="{\"question\": \"$query\", \"summary\": \"$summary\", \"link_1\": \"$link_1\", \"link_2\": \"$link_2\", \"link_3\": \"$link_3\"}"$'\n'

      fi
  done < "$input_file"

  format_output

}

# :command.function
vlvt_verify_command() {
  # src/verify_command.sh
  # shellcheck disable=SC2148
  # shellcheck disable=SC2154
  input_file=${args[input_file]}
  format=${args[--format]}
  mrr_threshold=${args[--mrr-threshold]}
  summary_threshold=${args[--summary-threshold]}
  token=${GCP_ACCESS_TOKEN}

  if [ -z "$token" ]; then

      token=$(gcloud auth print-access-token)
  fi

  # Check if the file exists
  if [ ! -f "$input_file" ]; then
    echo "File not found: $input_file"
    exit 1
  fi

  # Read the CSV file line by line
  read -r header < "$input_file" # Read the first line as header
  column_names=($(echo "$header" | tr ',' '\n')) # Split header into array based on comma delimiter

  # Verify column names or take any actions based on them
  expected_columns=("id" "query" "expected_summary" "expected_document_link_1" "expected_document_link_2") # Define expected column names
  if [ "${#column_names[@]}" -ne "${#expected_columns[@]}" ]; then
    echo "Column count doesn't match! Run verify --help for format"
    exit 1
  fi

  for ((i = 0; i < ${#expected_columns[@]}; i++)); do
    if [ "${column_names[$i]}" != "${expected_columns[$i]}" ]; then
      echo "Column '${expected_columns[$i]}' not found!"
      exit 1
    fi
  done

  ids=()
  queries=()
  expected_summaries=()
  expected_document_links_1=()
  expected_document_links_2=()

  # Read the rest of the rows and store individual fields in arrays
  while IFS=',' read -r id query expected_summary expected_document_link_1 expected_document_link_2 ; do
    ids+=("$id")
    queries+=("$query")
    expected_summaries+=("$expected_summary")
    expected_document_links_1+=("$expected_document_link_1")
    expected_document_links_2+=("$expected_document_link_2")
  done < <(tail -n +2 "$input_file")

  output=""
  summary_correct_count=0
  total_mrr=0
  total_rows=${#ids[@]}
  # Loop through the entries and call vertex ai search and then call palm bison to match the summaries
  for ((i = 0; i < total_rows; i++)); do
    # Skip line with empty id field
    if [ -z "${ids[$i]}" ]; then
        continue;
    else
      current_id="${ids[$i]}"
      expected_link_1="${expected_document_links_1[$i]}"
      expected_link_2="${expected_document_links_2[$i]}"
      expected_link_1=$(echo "$expected_link_1" | xargs)
      expected_link_2=$(echo "$expected_link_2" | xargs)

      query=${queries[$i]}
      call_vertex_ai_search

      # Calculate precision p@0 this tells us if the first result is perfect match
      if [ "$link_1" == "${expected_link_1}" ]; then
          p0_precision=1.0
      else

          p0_precision=0.0
      fi

      # Calculate precision
      # p@1
      precision_1=$(precision_at  "$link_1" "${expected_link_1}" "${expected_link_2}" 1 )
       # p@2
      precision_2=$(precision_at  "$link_2" "${expected_link_1}" "${expected_link_2}" 2 )


      map=$(echo "scale=4; ($precision_1 + $precision_2) / 2 " | bc)

      mrr=$(rank_reciprocal_at_2 "${link_1}" "${link_2}" "${expected_link_1}" "${expected_link_2}")
      total_mrr=$(echo "scale=4; $mrr + $total_mrr " | bc)

      # NDCG
      ndcg=$(calc_ndcg "${link_1}" "${link_2}" "${expected_link_1}" "${expected_link_2}")

      # Calculate the

      expected_summary=${expected_summaries[$i]}
      # Verify the summary by calling text-bison to do a semantic comparison to see if it matches expected summary
      call_palm_text_bison

      # Calculate precision
      if [ "$summary_match" == "same" ];then

        summary_correct_count=$((summary_correct_count + 1))
      fi

      summary_precision=$(echo "scale=4; $summary_correct_count / ($i+1) " | bc)

      # Create JSONL output
      #output+="{\"id\": \"$current_id\", \"actual_summary\": \"$summary\", \"expected_summary\": \"$expected_summary\", \"summary_match\": \"$summary_match\" , \"expected_link_1\": \"$expected_link_1\"  ,  \"actual_link_1\": \"$link_1\", \"link_1_match\": \"$link_1_match\", \"expected_link_2\": \"$expected_link_2\" ,  \"actual_link_2\": \"$link_2\"  ,\"link_2_match\": \"$link_2_match\", \"summary_p\": \"$summary_precision\" ,  \"@p0\": \"$p0_precision\", \"@p1\": \"$p1_precision\", \"@p2\": \"$p2_precision\"}"$'\n'
      output+="{\"id\": \"$current_id\", \"summary_p\": \"$summary_precision\" ,  \"@p0\": \"$p0_precision\", \"mrr\": \"$mrr\",  \"mAP@2\": \"$map\", \"ndcg@2\": \"$ndcg\", \"question\": \"$query\", \"actual_summary\": \"$summary\", \"expected_summary\": \"$expected_summary\" , \"expected_link_1\": \"$expected_link_1\"  ,  \"actual_link_1\": \"$link_1\", \"expected_link_2\": \"$expected_link_2\" ,  \"actual_link_2\": \"$link_2\" }"$'\n'

    fi
  done

  average_summary_precision=$(echo "scale=4; $summary_correct_count / $total_rows " | bc)
  overall_mrr=$(echo "scale=4; $total_mrr / $total_rows " | bc)
  mrr_string=""
  average_summary_precision_string=""
  exit_code=0
  # Check if the MRR threshold is set
  if [ -z "$mrr_threshold" ]; then

    exit_code=0
  else

    if (( $(echo "$overall_mrr > $mrr_threshold" | bc -l) )); then
       mrr_string="PASSED: MRR"
    else
       mrr_string="FAILED: MRR"
       exit_code=1

    fi

  fi
  if [ -z "$summary_threshold" ]; then

    exit_code=$exit_code
  else

    if (( $(echo "$average_summary_precision > $summary_threshold" | bc -l) )); then
       average_summary_precision_string="PASSED: SummaryP"
    else
       average_summary_precision_string="FAILED: SummaryP"
       exit_code=1

    fi

  fi
  # Summary Row
  output+="{\"id\": \"\", \"summary_p\": \"$average_summary_precision\", \"@p0\": \"\", \"mrr\": \"$overall_mrr\",  \"mAP@2\": \"\", \"ndcg@2\": \"\", \"question\": \"\", \"actual_summary\": \"\", \"expected_summary\": \"\" , \"expected_link_1\": \"\"  ,  \"actual_link_1\": \"\", \"expected_link_2\": \"\" ,  \"actual_link_2\": \"\" }"$'\n'

  if [[ -n "$mrr_threshold" || -n  "$summary_threshold" ]]; then
    output+="{\"id\": \"\", \"summary_p\": \"$average_summary_precision_string\", \"@p0\": \"\", \"mrr\": \"$mrr_string\",  \"mAP@2\": \"\", \"ndcg@2\": \"\", \"question\": \"\", \"actual_summary\": \"\", \"expected_summary\": \"\" , \"expected_link_1\": \"\"  ,  \"actual_link_1\": \"\", \"expected_link_2\": \"\" ,  \"actual_link_2\": \"\" }"$'\n'
  fi
  # Summary Row

  format_output

  exit $exit_code

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        vlvt_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter

  if [[ -z "${VAI_SEARCH_PROJECT_NUMBER:-}" ]]; then
    printf "missing required environment variable: VAI_SEARCH_PROJECT_NUMBER\n" >&2
    exit 1
  fi
  if [[ -z "${VAI_SEARCH_DATASTORE_NAME:-}" ]]; then
    printf "missing required environment variable: VAI_SEARCH_DATASTORE_NAME\n" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    init | i)
      action="init"
      shift
      vlvt_init_parse_requirements "$@"
      shift $#
      ;;

    search | s)
      action="search"
      shift
      vlvt_search_parse_requirements "$@"
      shift $#
      ;;

    bsearch | b)
      action="bsearch"
      shift
      vlvt_bsearch_parse_requirements "$@"
      shift $#
      ;;

    verify | v)
      action="verify"
      shift
      vlvt_verify_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      vlvt_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
vlvt_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        vlvt_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v curl >/dev/null 2>&1; then
    deps['curl']="$(command -v curl | head -n1)"
  else
    printf "missing dependency: curl\n" >&2
    exit 1
  fi

  if command -v jq >/dev/null 2>&1; then
    deps['jq']="$(command -v jq | head -n1)"
  else
    printf "missing dependency: jq\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
vlvt_search_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        vlvt_search_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v curl >/dev/null 2>&1; then
    deps['curl']="$(command -v curl | head -n1)"
  else
    printf "missing dependency: curl\n" >&2
    exit 1
  fi

  if command -v jq >/dev/null 2>&1; then
    deps['jq']="$(command -v jq | head -n1)"
  else
    printf "missing dependency: jq\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="search"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --format | -f)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--format']="$2"
          shift
          shift
        else
          printf "%s\n" "--format requires an argument: --format, -f FORMAT" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['query']+x} ]]; then

          args['query']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['query']+x} ]]; then
    printf "missing required argument: QUERY\nusage: vlvt search QUERY [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['--format']:-} ]] || args['--format']="csv"

  # :command.whitelist_filter
  if [[ ${args['--format']:-} ]] && [[ ! ${args['--format']:-} =~ ^(csv|table|jsonl|raw)$ ]]; then
    printf "%s\n" "--format must be one of: csv, table, jsonl, raw" >&2
    exit 1
  fi

}

# :command.parse_requirements
vlvt_bsearch_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        vlvt_bsearch_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v curl >/dev/null 2>&1; then
    deps['curl']="$(command -v curl | head -n1)"
  else
    printf "missing dependency: curl\n" >&2
    exit 1
  fi

  if command -v jq >/dev/null 2>&1; then
    deps['jq']="$(command -v jq | head -n1)"
  else
    printf "missing dependency: jq\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="bsearch"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --format | -f)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--format']="$2"
          shift
          shift
        else
          printf "%s\n" "--format requires an argument: --format, -f FORMAT" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['input_file']+x} ]]; then

          args['input_file']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['input_file']+x} ]]; then
    printf "missing required argument: INPUT_FILE\nusage: vlvt bsearch INPUT_FILE [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['--format']:-} ]] || args['--format']="csv"

  # :command.whitelist_filter
  if [[ ${args['--format']:-} ]] && [[ ! ${args['--format']:-} =~ ^(csv|table|jsonl)$ ]]; then
    printf "%s\n" "--format must be one of: csv, table, jsonl" >&2
    exit 1
  fi

}

# :command.parse_requirements
vlvt_verify_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        vlvt_verify_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter

  if [[ -z "${TEXT_BISON_PROJECT_ID:-}" ]]; then
    printf "missing required environment variable: TEXT_BISON_PROJECT_ID\n" >&2
    exit 1
  fi
  if [[ -z "${TEXT_BISON_LOCATION_ID:-}" ]]; then
    printf "missing required environment variable: TEXT_BISON_LOCATION_ID\n" >&2
    exit 1
  fi

  # :command.dependencies_filter
  if command -v curl >/dev/null 2>&1; then
    deps['curl']="$(command -v curl | head -n1)"
  else
    printf "missing dependency: curl\n" >&2
    exit 1
  fi

  if command -v jq >/dev/null 2>&1; then
    deps['jq']="$(command -v jq | head -n1)"
  else
    printf "missing dependency: jq\n" >&2
    exit 1
  fi

  if command -v bc >/dev/null 2>&1; then
    deps['bc']="$(command -v bc | head -n1)"
  else
    printf "missing dependency: bc\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="verify"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --format | -f)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--format']="$2"
          shift
          shift
        else
          printf "%s\n" "--format requires an argument: --format, -f FORMAT" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --mrr-threshold | -t)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--mrr-threshold']="$2"
          shift
          shift
        else
          printf "%s\n" "--mrr-threshold requires an argument: --mrr-threshold, -t MRR-THRESHOLD" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --summary-threshold | -s)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--summary-threshold']="$2"
          shift
          shift
        else
          printf "%s\n" "--summary-threshold requires an argument: --summary-threshold, -s SUMMARY-THRESHOLD" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['input_file']+x} ]]; then

          args['input_file']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['input_file']+x} ]]; then
    printf "missing required argument: INPUT_FILE\nusage: vlvt verify INPUT_FILE [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['--format']:-} ]] || args['--format']="csv"

  # :command.whitelist_filter
  if [[ ${args['--format']:-} ]] && [[ ! ${args['--format']:-} =~ ^(csv|table|jsonl)$ ]]; then
    printf "%s\n" "--format must be one of: csv, table, jsonl" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "init") vlvt_init_command ;;
    "search") vlvt_search_command ;;
    "bsearch") vlvt_bsearch_command ;;
    "verify") vlvt_verify_command ;;
  esac
}

initialize
run "$@"
